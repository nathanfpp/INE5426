%{
#include "estruturas.h"
#include <string>
#include "parser.h" /* Generated by Bison */
#include "arvoreSintatica.h"

extern int yylineno;
void yyerror(const char* s, ...);

%}

%option noyywrap nodefault yylineno

tipo_int     ("int")
tipo_float   ("float")
tipo_bool    ("bool")
valor_int    [0-9]+
valor_float  {valor_int}*\.{valor_int}
valor_bool   ("true"|"false")
letter       [A-Z]|[a-z]([a-z]|[A-Z]|"_"|[0-9])*

%%

[ \t]               ; // Ignora espaços entre tokens

{tipo_int}          { yylval.tipo = AST::TipoDeNodo::inteiro;  return T_TYPE_INT;   } // 
{tipo_float}        { yylval.tipo = AST::TipoDeNodo::real;     return T_TYPE_FLOAT; } // Tipos de Variáveis
{tipo_bool}         { yylval.tipo = AST::TipoDeNodo::boolean;  return T_TYPE_BOOL;  } // 

{valor_int}         { yylval.valor = strdup(yytext);  return T_INT;   } // Valores de
{valor_float}       { yylval.valor = strdup(yytext);  return T_FLOAT; } //  Variáveis
{valor_bool}        { yylval.valor = strdup(yytext);  return T_BOOL;  } //
{letter}            { yylval.valor = strdup(yytext);  return T_VAR;   } //

"+"                 { return T_PLUS ; } //
"-"                 { return T_MINUS; } // Operadores
\*                  { return T_TIMES; } // Aritméticos
"/"                 { return T_DIV;   } //

"!"                 { return T_NOT; } // 
"&"                 { return T_AND; } // Operadores Lógicos
"|"                 { return T_OR;  } // 

"=="                { return T_EQUAL;  } //
"!="                { return T_DIF;    } //
">"                 { return T_HIGHER; } // Tokens de
">="                { return T_HIGH;   } // Comparadores
"<"                 { return T_LOWER;  } //
"<="                { return T_LOW;    } //

"("                 { return T_OPEN;  }
")"                 { return T_CLOSE; }
"="                 { return T_EQUAL; }
","                 { return T_COMMA; }

\n                  { return T_NL; }

.                   { yyerror("Unknown token! %c\n", *yytext);} 

%%

void yyerror(const char *s, ...){
    va_list ap;
    va_start(ap, s);
    std::fprintf(stderr, "Line %d: error: ", yylineno);
    std::vfprintf(stderr, s, ap);
}

