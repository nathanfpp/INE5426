%{
#include "estruturas.h"
#include <string>
#include "parser.h" /* Generated by Bison */

extern int yylineno;
void yyerror(const char* s, ...);
%}

%option noyywrap nodefault yylineno

integer   [0-9]+
floating  {integer}*\.{integer}
letter    [A-Z]|[a-z]([a-z]|[A-Z]|"_"|[0-9])*
int       ("int")
float     ("float")

%%

[ \t]               ; //ignores spaces
{int}               { return T_TYPE_INT ;  }
{float}             { return T_TYPE_FLOAT ;  }
{letter}            { yylval.value.var = strdup(yytext);
		      yylval.value.type = strdup(""); 
		      return T_VAR  ;  }
   
{integer}           { yylval.value.type = strdup("int");
		      yylval.value.integer = std::atoi(yytext); 
                      return T_INT  ; }
{floating}          { yylval.value.type = strdup("float");
		      yylval.value.real = std::atof(yytext);
                      return T_FLOAT; }

","                 {                                          return T_COMMA ; } 
"+"                 { yylval.signal = '+' ;                    return T_PLUS ; } /*special character with " "*/
"-"                 { yylval.signal = '-' ;                    return T_MINUS;} /*special character with " "*/
\*                  { yylval.signal = '*' ;                    return T_TIMES;} /* special character with \ */
"/"                 { yylval.signal = '/' ;                    return T_DIV;} /*special character with " "*/
"("                 {                                          return T_OPEN;}
")"                 {                                          return T_CLOSE;}
"="                 {                                          return T_EQUAL;}
\n                  {                                          return T_NL;}
.                   { yyerror("Unknown token! %c\n", *yytext);} /*complains about every unknown character*/

%%

void yyerror(const char *s, ...){
    va_list ap;
    va_start(ap, s);
    std::fprintf(stderr, "Line %d: error: ", yylineno);
    std::vfprintf(stderr, s, ap);
}

